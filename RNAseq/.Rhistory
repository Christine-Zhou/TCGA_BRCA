rm(list = ls())
options(stringsAsFactors = F)
a=read.table('TCGA-BRCA.survival.tsv.gz',header = T,sep = '\t')
a=read.table('TCGA-BRCA.GDC_phenotype.tsv.gz',header = T,sep = '\t',quote = '')
(tmp=as.data.frame(colnames(a)))
tmp=a[,grepl('her2',colnames(a))]
table(a$breast_carcinoma_estrogen_receptor_status)
table(a$breast_carcinoma_progesterone_receptor_status)
table(a$lab_proc_her2_neu_immunohistochemistry_receptor_status)
eph=a[,grepl('receptor_status',colnames(a))]
eph=eph[,1:3]
tnbc_s=a[apply(eph,1, function(x) sum(x=='Negative'))==3,1]
tnbc_s
rm(list = ls())
options(stringsAsFactors = F)
load(file = 'tnbc_paired_exprSet.Rdata')
rm(list = ls())
options(stringsAsFactors = F)
load(file = 'tnbc_paired_exprSet.Rdata')
group_list=ifelse(as.numeric(substr(colnames(exprSet),14,15)) < 10,
'tumor','normal')
table(group_list)
dat=exprSet
# 每次都要检测数据
dat[1:4,1:4]
## 下面是画PCA的必须操作，需要看说明书。
dat=t(dat)
dat=as.data.frame(dat)
dat=cbind(dat,group_list)
library("FactoMineR")
library("factoextra")
# The variable group_list (index = ncol(dat)) is removed
# before PCA analysis
dat.pca <- PCA(dat[,-ncol(dat)], graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = dat$group_list, # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
rm(list = ls())
options(stringsAsFactors = F)
load(file = 'tnbc_paired_exprSet.Rdata')
# https://mp.weixin.qq.com/s/MJLEZPWqzJe4LaKRDtiZQQ
# 挑选出有PIK3CA突变的样本
# 载入下载好的突变信息文件
mutype_file <- read.table('../MAF/TCGA-BRCA.mutect2_snv.tsv.gz',
header = T,sep = '\t',quote = '')
## 取出含有'PIK3CA'信息的行
## 取出含有'PIK3CA'信息的行
PIK3CA <- mutype_file[mutype_file$gene=='PIK3CA',]
PIK3CA_sample <- unique(sort(PIK3CA$Sample_ID))
PIK3CA_sample
# https://mp.weixin.qq.com/s/MJLEZPWqzJe4LaKRDtiZQQ
# 挑选出有PIK3CA突变的样本
# 载入下载好的突变信息文件
exprSet[1:4,1:4]
PIK3CA_sample
# https://mp.weixin.qq.com/s/MJLEZPWqzJe4LaKRDtiZQQ
# 挑选出有PIK3CA突变的样本
# 载入下载好的突变信息文件
exprSet[1:4,1:4]
colnames(exprSet) %in% PIK3CA_sample
View(mutype_file)
mut <- read.table('../MAF/TCGA-BRCA.mutect2_snv.tsv.gz',
header = T,sep = '\t',quote = '')
View(mut)
library(dplyr)
colnames(mut)
select(mut,gene=='PIK3CA')
subset(mut,gene=='PIK3CA')
mut <- subset(mut,gene=='PIK3CA')
View(mut)
table(mut$effect)
## 取出含有'PIK3CA'信息的行
PIK3CA_sample <- unique(sort(mut$Sample_ID))
PIK3CA_sample
# https://mp.weixin.qq.com/s/MJLEZPWqzJe4LaKRDtiZQQ
# 挑选出有PIK3CA突变的样本
# 载入下载好的突变信息文件
exprSet[1:4,1:4]
table(mut$effect)
rm(list = ls())
options(stringsAsFactors = F)
load(file = 'tnbc_paired_exprSet.Rdata')
## 根据TCGA样本的命名可以区分正常组织和肿瘤样本的测序结果
group_list=ifelse(as.numeric(substr(colnames(exprSet),14,15)) < 10,
'tumor','normal')
table(group_list)
library(DESeq2)
(colData <- data.frame(row.names=colnames(exprSet),
group_list=group_list) )
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
exprSet[1:4,1:4]
strsplit('ENSG00000000003.13','[.]')[[1]][1]
exprSet[1:4,1:4]
# strsplit('ENSG00000000003.13','[.]')[[1]][1]
library(stringr)
a=data.frame(V1=colnames(exprSet))
library(stringr)
class(str_split(a$V1,'[.]',simplify = T))
class(unlist(str_split(a$V1,'[.]')))
a$ensembl_id=str_split(a$V1,'[.]',simplify = T)[,1]
library(org.Hs.eg.db)
g2s=toTable(org.Hs.egSYMBOL)
g2e=toTable(org.Hs.egENSEMBL)
b=merge(a,g2e,by='ensembl_id',all.x=T)
d=merge(b,g2s,by='gene_id',all.x=T)
table(d$ensembl_id)[table(d$ensembl_id)>1]
a=data.frame(V1=rownames(exprSet))
class(str_split(a$V1,'[.]',simplify = T))
class(unlist(str_split(a$V1,'[.]')))
a$ensembl_id=str_split(a$V1,'[.]',simplify = T)[,1]
library(org.Hs.eg.db)
g2s=toTable(org.Hs.egSYMBOL)
g2e=toTable(org.Hs.egENSEMBL)
b=merge(a,g2e,by='ensembl_id',all.x=T)
d=merge(b,g2s,by='gene_id',all.x=T)
table(d$ensembl_id)[table(d$ensembl_id)>1]
d=d[order(d$V1),]
d=d[!duplicated(d$V1),]
d=d[match(a$V1,d$V1),]
head(d)
length(unique(d$symbol))
View(a)
length(unique(d$ensembl_id))
View(d)
head(duplicated(sort(d$symbol)))
sort(d$symbol)[head(!duplicated(sort(d$symbol)))]
View(d)
sort(d$symbol)[head(duplicated(sort(d$symbol)))]
sort(d$symbol)[!duplicated(sort(d$symbol))]
sort(d$symbol)[duplicated(sort(d$symbol))]
View(d)
dat=exprSet
dat[1:4,1:4]
ids$median=apply(dat,1,median)
ids=d
View(d)
ids$median=apply(dat,1,median)
ids=ids[order(ids$symbol,ids$median,decreasing = T),]
ids=ids[!duplicated(ids$symbol),]
dat=dat[ids$V1,]
rownames(dat)=ids$symbol
dat[1:4,1:4]
rownames(dat)=ids$symbol
dat[1:4,1:4]
dat=exprSet
dat[1:4,1:4]
ids=d
ids$median=apply(dat,1,median)
ids=ids[order(ids$symbol,ids$median,decreasing = T),]
ids=ids[!duplicated(ids$symbol),]
dat=dat[ids$V1,]
rownames(dat)=ids$symbol
dat[1:4,1:4]
ids$symbol
rownames(dat)=ids$symbol
rownames(dat)
str(ids)
rownames(dat)=ids$symbol
table(is.na(ids$symbol))
ids$symbol[is.na(ids$symbol)]
View(d)
ids$symbol[is.na(ids$symbol)]='na'
ids$symbol[is.na(ids$symbol)]
ids$symbol[is.na(ids$symbol)]='na'
rownames(dat)=ids$symbol
dat[1:4,1:4]
exprSet=dat
exprSet[1:4,1:4]
table(group_list)
(colData <- data.frame(row.names=colnames(exprSet),
group_list=group_list) )
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeqDataSetFromMatrix(countData = as.matrix(exprSet),
colData = colData,
design = ~ group_list)
group_list
exprSet
library(DESeq2)
(colData <- data.frame(row.names=colnames(exprSet),
group_list=group_list) )
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
group_list
colData
colnames(exprSet)
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
library(DESeq2)
exprSet[1:4,1:4]
colnames(exprSet)
dds
library(edgeR)
d <- DGEList(counts=exprSet,group=factor(group_list))
keep <- rowSums(cpm(d)>1) >= 2
table(keep)
d <- d[keep, , keep.lib.sizes=FALSE]
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d)
d$samples
dge=d
design <- model.matrix(~0+factor(group_list))
rownames(design)<-colnames(dge)
colnames(design)<-levels(factor(group_list))
dge=d
dge <- estimateGLMCommonDisp(dge,design)
dge <- estimateGLMTrendedDisp(dge, design)
dge <- estimateGLMTagwiseDisp(dge, design)
fit <- glmFit(dge, design)
# https://www.biostars.org/p/110861/
lrt <- glmLRT(fit,  contrast=c(-1,1))
nrDEG=topTags(lrt, n=nrow(dge))
nrDEG=as.data.frame(nrDEG)
head(nrDEG)
edgeR_DEG =nrDEG
nrDEG=edgeR_DEG[,c(1,5)]
colnames(nrDEG)=c('log2FoldChange','pvalue')
draw_h_v(exprSet,nrDEG,'edgeR',group_list,1)
View(nrDEG)
suppressMessages(library(limma))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
design
dge <- DGEList(counts=exprSet)
dge <- calcNormFactors(dge)
logCPM <- cpm(dge, log=TRUE, prior.count=3)
v <- voom(dge,design,plot=TRUE, normalize="quantile")
fit <- lmFit(v, design)
group_list
cont.matrix=makeContrasts(contrasts=c('tumor-normal'),levels = design)
fit2=contrasts.fit(fit,cont.matrix)
fit2=eBayes(fit2)
tempOutput = topTable(fit2, coef='tumor-normal', n=Inf)
DEG_limma_voom = na.omit(tempOutput)
head(DEG_limma_voom)
nrDEG=DEG_limma_voom[,c(1,4)]
colnames(nrDEG)=c('log2FoldChange','pvalue')
View(nrDEG)
View(exprSet)
exprSet['ACTL8',]
library(DESeq2)
(colData <- data.frame(row.names=colnames(exprSet),
group_list=group_list) )
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
